// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketFileVersionInitParameters struct {

	// The ID of the bucket.
	// +crossplane:generate:reference:type=github.com/eaglesemanation/provider-b2/apis/b2/v1alpha1.Bucket
	// +crossplane:generate:reference:refFieldName=BucketRef
	// +crossplane:generate:reference:selectorFieldName=BucketSelector
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	// Reference to a Bucket in b2 to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in b2 to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// Content type. If not set, it will be set based on the file extension.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// The custom information that is uploaded with the file.
	// +mapType=granular
	FileInfo map[string]*string `json:"fileInfo,omitempty" tf:"file_info,omitempty"`

	// The name of the B2 file.
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// Server-side encryption settings.
	ServerSideEncryption []ServerSideEncryptionInitParameters `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`

	// Path to the local file.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type BucketFileVersionObservation struct {

	// One of 'start', 'upload', 'hide', 'folder', or other values added in the future.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The ID of the bucket.
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	// MD5 sum of the content.
	ContentMd5 *string `json:"contentMd5,omitempty" tf:"content_md5,omitempty"`

	// SHA1 hash of the content.
	ContentSha1 *string `json:"contentSha1,omitempty" tf:"content_sha1,omitempty"`

	// Content type. If not set, it will be set based on the file extension.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// The unique identifier for this version of this file.
	FileID *string `json:"fileId,omitempty" tf:"file_id,omitempty"`

	// The custom information that is uploaded with the file.
	// +mapType=granular
	FileInfo map[string]*string `json:"fileInfo,omitempty" tf:"file_info,omitempty"`

	// The name of the B2 file.
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Server-side encryption settings.
	ServerSideEncryption []ServerSideEncryptionObservation `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`

	// The file size.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Path to the local file.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// This is a UTC time when this file was uploaded.
	UploadTimestamp *float64 `json:"uploadTimestamp,omitempty" tf:"upload_timestamp,omitempty"`
}

type BucketFileVersionParameters struct {

	// The ID of the bucket.
	// +crossplane:generate:reference:type=github.com/eaglesemanation/provider-b2/apis/b2/v1alpha1.Bucket
	// +crossplane:generate:reference:refFieldName=BucketRef
	// +crossplane:generate:reference:selectorFieldName=BucketSelector
	// +kubebuilder:validation:Optional
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	// Reference to a Bucket in b2 to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in b2 to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// Content type. If not set, it will be set based on the file extension.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// The custom information that is uploaded with the file.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	FileInfo map[string]*string `json:"fileInfo,omitempty" tf:"file_info,omitempty"`

	// The name of the B2 file.
	// +kubebuilder:validation:Optional
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// Server-side encryption settings.
	// +kubebuilder:validation:Optional
	ServerSideEncryption []ServerSideEncryptionParameters `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`

	// Path to the local file.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type KeyInitParameters struct {

	// Key identifier stored in file info metadata
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// Secret key value, in standard Base 64 encoding (RFC 4648)
	SecretB64SecretRef *v1.SecretKeySelector `json:"secretB64SecretRef,omitempty" tf:"-"`
}

type KeyObservation struct {

	// Key identifier stored in file info metadata
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`
}

type KeyParameters struct {

	// Key identifier stored in file info metadata
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// Secret key value, in standard Base 64 encoding (RFC 4648)
	// +kubebuilder:validation:Optional
	SecretB64SecretRef *v1.SecretKeySelector `json:"secretB64SecretRef,omitempty" tf:"-"`
}

type ServerSideEncryptionInitParameters struct {

	// Server-side encryption algorithm. AES256 is the only one supported.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Key used in SSE-C mode.
	Key []KeyInitParameters `json:"key,omitempty" tf:"key,omitempty"`

	// Server-side encryption mode.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ServerSideEncryptionObservation struct {

	// Server-side encryption algorithm. AES256 is the only one supported.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Key used in SSE-C mode.
	Key []KeyObservation `json:"key,omitempty" tf:"key,omitempty"`

	// Server-side encryption mode.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ServerSideEncryptionParameters struct {

	// Server-side encryption algorithm. AES256 is the only one supported.
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Key used in SSE-C mode.
	// +kubebuilder:validation:Optional
	Key []KeyParameters `json:"key,omitempty" tf:"key,omitempty"`

	// Server-side encryption mode.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

// BucketFileVersionSpec defines the desired state of BucketFileVersion
type BucketFileVersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketFileVersionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketFileVersionInitParameters `json:"initProvider,omitempty"`
}

// BucketFileVersionStatus defines the observed state of BucketFileVersion.
type BucketFileVersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketFileVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketFileVersion is the Schema for the BucketFileVersions API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,b2}
type BucketFileVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fileName) || (has(self.initProvider) && has(self.initProvider.fileName))",message="spec.forProvider.fileName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.source) || (has(self.initProvider) && has(self.initProvider.source))",message="spec.forProvider.source is a required parameter"
	Spec   BucketFileVersionSpec   `json:"spec"`
	Status BucketFileVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketFileVersionList contains a list of BucketFileVersions
type BucketFileVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketFileVersion `json:"items"`
}

// Repository type metadata.
var (
	BucketFileVersion_Kind             = "BucketFileVersion"
	BucketFileVersion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketFileVersion_Kind}.String()
	BucketFileVersion_KindAPIVersion   = BucketFileVersion_Kind + "." + CRDGroupVersion.String()
	BucketFileVersion_GroupVersionKind = CRDGroupVersion.WithKind(BucketFileVersion_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketFileVersion{}, &BucketFileVersionList{})
}
