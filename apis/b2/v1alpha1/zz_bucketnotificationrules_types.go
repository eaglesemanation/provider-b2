// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketNotificationRulesInitParameters struct {

	// The ID of the bucket.
	// +crossplane:generate:reference:type=github.com/eaglesemanation/provider-b2/apis/b2/v1alpha1.Bucket
	// +crossplane:generate:reference:refFieldName=BucketRef
	// +crossplane:generate:reference:selectorFieldName=BucketSelector
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	// Reference to a Bucket in b2 to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in b2 to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// An array of Event Notification Rules.
	NotificationRules []NotificationRulesInitParameters `json:"notificationRules,omitempty" tf:"notification_rules,omitempty"`
}

type BucketNotificationRulesObservation struct {

	// The ID of the bucket.
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An array of Event Notification Rules.
	NotificationRules []NotificationRulesObservation `json:"notificationRules,omitempty" tf:"notification_rules,omitempty"`
}

type BucketNotificationRulesParameters struct {

	// The ID of the bucket.
	// +crossplane:generate:reference:type=github.com/eaglesemanation/provider-b2/apis/b2/v1alpha1.Bucket
	// +crossplane:generate:reference:refFieldName=BucketRef
	// +crossplane:generate:reference:selectorFieldName=BucketSelector
	// +kubebuilder:validation:Optional
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	// Reference to a Bucket in b2 to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in b2 to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// An array of Event Notification Rules.
	// +kubebuilder:validation:Optional
	NotificationRules []NotificationRulesParameters `json:"notificationRules,omitempty" tf:"notification_rules,omitempty"`
}

type CustomHeadersInitParameters struct {

	// Name of the header.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the header.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomHeadersObservation struct {

	// Name of the header.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Value of the header.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomHeadersParameters struct {

	// Name of the header.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Value of the header.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type NotificationRulesInitParameters struct {

	// The list of event types for the event notification rule.
	EventTypes []*string `json:"eventTypes,omitempty" tf:"event_types,omitempty"`

	// Whether the event notification rule is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// A name for the event notification rule. The name must be unique among the bucket's notification rules.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which object(s) in the bucket the event notification rule applies to.
	ObjectNamePrefix *string `json:"objectNamePrefix,omitempty" tf:"object_name_prefix,omitempty"`

	// The target configuration for the event notification rule.
	TargetConfiguration []TargetConfigurationInitParameters `json:"targetConfiguration,omitempty" tf:"target_configuration,omitempty"`
}

type NotificationRulesObservation struct {

	// The list of event types for the event notification rule.
	EventTypes []*string `json:"eventTypes,omitempty" tf:"event_types,omitempty"`

	// Whether the event notification rule is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Whether the event notification rule is suspended.
	IsSuspended *bool `json:"isSuspended,omitempty" tf:"is_suspended,omitempty"`

	// A name for the event notification rule. The name must be unique among the bucket's notification rules.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies which object(s) in the bucket the event notification rule applies to.
	ObjectNamePrefix *string `json:"objectNamePrefix,omitempty" tf:"object_name_prefix,omitempty"`

	// A brief description of why the event notification rule was suspended.
	SuspensionReason *string `json:"suspensionReason,omitempty" tf:"suspension_reason,omitempty"`

	// The target configuration for the event notification rule.
	TargetConfiguration []TargetConfigurationObservation `json:"targetConfiguration,omitempty" tf:"target_configuration,omitempty"`
}

type NotificationRulesParameters struct {

	// The list of event types for the event notification rule.
	// +kubebuilder:validation:Optional
	EventTypes []*string `json:"eventTypes" tf:"event_types,omitempty"`

	// Whether the event notification rule is enabled.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// A name for the event notification rule. The name must be unique among the bucket's notification rules.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies which object(s) in the bucket the event notification rule applies to.
	// +kubebuilder:validation:Optional
	ObjectNamePrefix *string `json:"objectNamePrefix,omitempty" tf:"object_name_prefix,omitempty"`

	// The target configuration for the event notification rule.
	// +kubebuilder:validation:Optional
	TargetConfiguration []TargetConfigurationParameters `json:"targetConfiguration" tf:"target_configuration,omitempty"`
}

type TargetConfigurationInitParameters struct {

	// When present, additional header name/value pairs to be sent on the webhook invocation.
	CustomHeaders []CustomHeadersInitParameters `json:"customHeaders,omitempty" tf:"custom_headers,omitempty"`

	// The signing secret for use in verifying the X-Bz-Event-Notification-Signature.
	HMACSha256SigningSecretSecretRef *v1.SecretKeySelector `json:"hmacSha256SigningSecretSecretRef,omitempty" tf:"-"`

	// The type of the target configuration, currently "webhook" only.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`

	// The URL for the webhook.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TargetConfigurationObservation struct {

	// When present, additional header name/value pairs to be sent on the webhook invocation.
	CustomHeaders []CustomHeadersObservation `json:"customHeaders,omitempty" tf:"custom_headers,omitempty"`

	// The type of the target configuration, currently "webhook" only.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`

	// The URL for the webhook.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TargetConfigurationParameters struct {

	// When present, additional header name/value pairs to be sent on the webhook invocation.
	// +kubebuilder:validation:Optional
	CustomHeaders []CustomHeadersParameters `json:"customHeaders,omitempty" tf:"custom_headers,omitempty"`

	// The signing secret for use in verifying the X-Bz-Event-Notification-Signature.
	// +kubebuilder:validation:Optional
	HMACSha256SigningSecretSecretRef *v1.SecretKeySelector `json:"hmacSha256SigningSecretSecretRef,omitempty" tf:"-"`

	// The type of the target configuration, currently "webhook" only.
	// +kubebuilder:validation:Optional
	TargetType *string `json:"targetType" tf:"target_type,omitempty"`

	// The URL for the webhook.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`
}

// BucketNotificationRulesSpec defines the desired state of BucketNotificationRules
type BucketNotificationRulesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketNotificationRulesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketNotificationRulesInitParameters `json:"initProvider,omitempty"`
}

// BucketNotificationRulesStatus defines the observed state of BucketNotificationRules.
type BucketNotificationRulesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketNotificationRulesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketNotificationRules is the Schema for the BucketNotificationRuless API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,b2}
type BucketNotificationRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notificationRules) || (has(self.initProvider) && has(self.initProvider.notificationRules))",message="spec.forProvider.notificationRules is a required parameter"
	Spec   BucketNotificationRulesSpec   `json:"spec"`
	Status BucketNotificationRulesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketNotificationRulesList contains a list of BucketNotificationRuless
type BucketNotificationRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketNotificationRules `json:"items"`
}

// Repository type metadata.
var (
	BucketNotificationRules_Kind             = "BucketNotificationRules"
	BucketNotificationRules_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketNotificationRules_Kind}.String()
	BucketNotificationRules_KindAPIVersion   = BucketNotificationRules_Kind + "." + CRDGroupVersion.String()
	BucketNotificationRules_GroupVersionKind = CRDGroupVersion.WithKind(BucketNotificationRules_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketNotificationRules{}, &BucketNotificationRulesList{})
}
